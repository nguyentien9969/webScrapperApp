// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace webScrapperApp.Migrations
{
    [DbContext(typeof(WebScraperContext))]
    [Migration("20240721165559_SeedLargeData")]
    partial class SeedLargeData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScraperId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("ScraperId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            LogId = 1,
                            LogLevel = "Info",
                            Message = "Scraper started",
                            ScraperId = 1,
                            Timestamp = new DateTime(2024, 7, 21, 16, 55, 58, 757, DateTimeKind.Utc).AddTicks(6208)
                        },
                        new
                        {
                            LogId = 2,
                            LogLevel = "Warning",
                            Message = "Scraper encountered an issue",
                            ScraperId = 2,
                            Timestamp = new DateTime(2024, 7, 21, 16, 55, 58, 757, DateTimeKind.Utc).AddTicks(6210)
                        });
                });

            modelBuilder.Entity("ScrapedData", b =>
                {
                    b.Property<int>("ScrapedDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScrapedDataId"));

                    b.Property<string>("ParsedData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScraperId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ScrapedDataId");

                    b.HasIndex("ScraperId");

                    b.ToTable("ScrapedData");

                    b.HasData(
                        new
                        {
                            ScrapedDataId = 1,
                            ParsedData = "Parsed data 1",
                            RawData = "Raw data 1",
                            ScraperId = 1,
                            Timestamp = new DateTime(2024, 7, 21, 16, 55, 58, 757, DateTimeKind.Utc).AddTicks(6227)
                        },
                        new
                        {
                            ScrapedDataId = 2,
                            ParsedData = "Parsed data 2",
                            RawData = "Raw data 2",
                            ScraperId = 2,
                            Timestamp = new DateTime(2024, 7, 21, 16, 55, 58, 757, DateTimeKind.Utc).AddTicks(6229)
                        });
                });

            modelBuilder.Entity("Scraper", b =>
                {
                    b.Property<int>("ScraperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScraperId"));

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScraperName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ScraperId");

                    b.ToTable("Scrapers");

                    b.HasData(
                        new
                        {
                            ScraperId = 1,
                            Schedule = "Daily",
                            ScraperName = "Example Scraper 1",
                            SourceUrl = "http://example.com",
                            Status = true
                        },
                        new
                        {
                            ScraperId = 2,
                            Schedule = "Weekly",
                            ScraperName = "Example Scraper 2",
                            SourceUrl = "http://example2.com",
                            Status = false
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@example.com",
                            Password = "password123",
                            Role = "Administrator",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user@example.com",
                            Password = "password123",
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("Log", b =>
                {
                    b.HasOne("Scraper", "Scraper")
                        .WithMany("Logs")
                        .HasForeignKey("ScraperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scraper");
                });

            modelBuilder.Entity("ScrapedData", b =>
                {
                    b.HasOne("Scraper", "Scraper")
                        .WithMany("ScrapedData")
                        .HasForeignKey("ScraperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scraper");
                });

            modelBuilder.Entity("Scraper", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("ScrapedData");
                });
#pragma warning restore 612, 618
        }
    }
}
